//The 3 pins that control the Shift Register
int latchPin;
int clockPin;
int dataPin;
int latchPin2;
int clockPin2;
int dataPin2;
int buttonPin;
int buttonPin2;
int buzzer;
int prevButtonState1;
int prevButtonState2;
int currentLED;
int currentLED2;
int currentLED3;
int currentLED4;
int stopLED;
int incrementer;
bool run1;
bool startGame;
bool isPressed;
bool isPressed2;
bool isPressed3;
bool isPressed4;
bool lvl1;
bool lvl2;
bool lvl3;
bool lvl4;
bool round1;
bool round1lvl2;
bool round1lvl3;
bool round1lvl4;
bool oneled;
bool clearGame;
byte output;
//A binary number that keeps track of the current STATE of the LEDs.
byte currentState;
byte currentState2;
byte currentState3;
byte currentState4;
void setup()
{
  Serial.begin(9600);
  latchPin = 8;
  clockPin = 12;
  dataPin = 11;
  latchPin2 = 7;
  clockPin2 = 4;
  dataPin2 = 10;
  buttonPin = 13;
  buttonPin2 = 2;
  buzzer = 3;
  prevButtonState1 = 0;
  prevButtonState2 = 0;
  run1 = false;
  startGame = false;
  isPressed = false;
  isPressed2 = false;
  isPressed3 = false;
  isPressed4 = false;
  output = 0;
  currentLED = 8;
  currentLED2 = 4;
  currentLED3 = 8;
  currentLED4 = 4;
  stopLED = 0;
  lvl1 = false;
  lvl2 = false;
  lvl3 = false;
  lvl4 = false;
  clearGame = true;
  pinMode(buttonPin, INPUT);
  pinMode(buttonPin2, INPUT);
  pinMode(latchPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(latchPin2, OUTPUT);
  pinMode(dataPin2, OUTPUT);
  pinMode(clockPin2, OUTPUT);
  pinMode(buzzer, OUTPUT);
  //This initializes the LEDs to their starting value, it should be
  //an 8 bit BINARY number. Where each bit corresponds to an LED.
  //0 means OFF and 1 means ON.
  currentState = 0B00000000;
  //               76543210
  currentState2 = 0B00000000;
}
void shiftRegisterWrite(byte leds)
{
  digitalWrite(latchPin, LOW);        // set latch LOW so you can edit SR
  shiftOut(dataPin, clockPin, LSBFIRST, leds);      // shift out the bits:
  digitalWrite(latchPin, HIGH);       // set latch HIGH to output new values for SR
}
void shiftRegisterWrite2(byte leds)
{
  digitalWrite(latchPin2, LOW);        // set latch LOW so you can edit SR
  shiftOut(dataPin2, clockPin2, LSBFIRST, leds);      // shift out the bits:
  digitalWrite(latchPin2, HIGH);       // set latch HIGH to output new values for SR
}
void loop()
{
  /*boolean play;
    if(detectButtonRelease(buttonPin2, prevButtonState2))
          startGame = true;

    if(startGame)
    {
    level1();
    }*/
            //tone(buzzer,200);
  Serial.println(oneled);
  if(detectButtonRelease(buttonPin2, prevButtonState2))
  {
    Serial.println("aa");
    lvl1=false;
    lvl2=false;
    lvl3=false;
    lvl4=false;
    currentLED = 8;
    currentLED2 = 4;
    currentLED3 = 8;
    currentLED4 = 4;
    oneled = false;
    isPressed = false;
    isPressed2 = false;
    isPressed3 = false;
    isPressed4 = false;  
    round1 = false;
    round1lvl2 = false;
    round1lvl3 = false;
    round1lvl4 = false;
    clearGame = true;
    //isPressed=false;
    startGame = true;
  }
  if(clearGame)
  {
    currentState = 0b00000000;
    currentState2 = 0b00000000;
    shiftRegisterWrite(0b00000000);
    shiftRegisterWrite2(0b00000000);
    clearGame = false;
  }
  if(startGame)
  {
    if (detectButtonRelease(buttonPin, prevButtonState1))
    {
      if(!lvl1)
      {
        isPressed = true;
        stopLED = currentLED;
        lvl1 = true;
        if(currentLED == 8 || currentLED == 4)
        {
          bitWrite(currentState, currentLED, 1);
          shiftRegisterWrite(currentState);
          oneled = true;
        }
          tone(buzzer,300);
          delay(100);
          noTone(buzzer);
      }
      else if(lvl1 &&  !lvl2)
      {
        isPressed2 = true;
        stopLED = currentLED2;
        if(oneled)
        {
          if(currentLED == 8 && currentLED2 == 3)
          {
            shiftRegisterWrite(currentState);
            lvl2 = true;
            tone(buzzer,400);
            delay(100);
            noTone(buzzer);          
          }
          else if(currentLED2 == currentLED-4)
          {
            shiftRegisterWrite(currentState);
            lvl2 = true;
            tone(buzzer,400);
            delay(100);
            noTone(buzzer);                    
          }
          else
          {
            tone(buzzer,100);
            delay(1500);
            noTone(buzzer);  
            for(int i = 0; i<5; i++)
            {
              bitWrite(currentState,currentLED2,0);
              shiftRegisterWrite(currentState);
              delay(100);
              bitWrite(currentState, currentLED2, 1);
              shiftRegisterWrite(currentState);
              delay(100);
            }
            bitWrite(currentState, currentLED2,0);
            shiftRegisterWrite(currentState);
            startGame=false;
          }
        }
        else
        {
          if(currentLED==5 && currentLED2==0)
          {
            bitWrite(currentState, currentLED2, 1);
            shiftRegisterWrite(currentState);
            lvl2 = true;
            oneled = true;
            tone(buzzer,400);
            delay(100);
            noTone(buzzer);                    
          }
          else if(currentLED2 == currentLED-4)
          {
            lvl2 = true;
            tone(buzzer,400);
            delay(100);
            noTone(buzzer);                    
          }
          else if(currentLED2 == currentLED-3)
          {
            bitWrite(currentState, currentLED2, 0);
            shiftRegisterWrite(currentState);
            lvl2 = true;
            oneled = true;
            currentLED2-=1;
            tone(buzzer,400);
            delay(100);
            noTone(buzzer);                    
          }
          else if(currentLED2 == currentLED-5)
          {
            bitWrite(currentState, currentLED2-1, 0);
            shiftRegisterWrite(currentState);
            lvl2 = true;
            oneled = true;
            tone(buzzer,400);
            delay(100);
            noTone(buzzer);                    
            //currentLED2+=1;
          }
          else
          {
            tone(buzzer,100);
            delay(1500);
            noTone(buzzer);  
            for(int i = 0; i<5; i++)
            {
              Serial.println("L");
              Serial.println(currentLED2);
              if(currentLED2!=4)
              {
                bitWrite(currentState,currentLED2,0);
              }
              bitWrite(currentState,currentLED2-1,0);
              shiftRegisterWrite(currentState);
              delay(100);
              if(currentLED2!=4)
                bitWrite(currentState,currentLED2,1);
              bitWrite(currentState, currentLED2-1, 1);
              shiftRegisterWrite(currentState);
              delay(100);
            }
            if(currentLED2!=4)
              bitWrite(currentState, currentLED2, 0);
            bitWrite(currentState, currentLED2-1, 0);
            shiftRegisterWrite(currentState); 
            startGame=false;
          }
        }
      }
      else if(lvl2 && !lvl3)
      {
        isPressed3 = true;
        stopLED = currentLED3;
        
        if(oneled)
        {
          if(currentLED2 == currentLED3-4)
          {
            shiftRegisterWrite2(currentState2);
            lvl3 = true;
            tone(buzzer,500);
            delay(100);
            noTone(buzzer); 
          }        
          else
          {
            tone(buzzer,100);
            delay(1500);
            noTone(buzzer);  
            for(int i = 0; i<5; i++)
            {
              bitWrite(currentState2,currentLED3,0);
              shiftRegisterWrite2(currentState2);
              delay(100);
              bitWrite(currentState2, currentLED3, 1);
              shiftRegisterWrite2(currentState2);
              delay(100);
            }
            bitWrite(currentState2, currentLED3,0);
            shiftRegisterWrite2(currentState2);  
            startGame=false;
          }
          Serial.println("hey");
        }
        else
        {
          if(currentLED2 == currentLED3-4)
          {
            lvl3 = true;
            tone(buzzer,500);
            delay(100);
            noTone(buzzer); 
          }
          else if(currentLED2 == currentLED3-5)
          {
            bitWrite(currentState2, currentLED3, 0);
            shiftRegisterWrite2(currentState2);
            lvl3 = true;
            oneled = true;
            currentLED3-=1;
            tone(buzzer,500);
            delay(100);
            noTone(buzzer);           
          }
          else if(currentLED2 == currentLED3-3)
          {
            bitWrite(currentState2, currentLED3-1, 0);
            shiftRegisterWrite2(currentState2);
            lvl3 = true;
            oneled = true;
            tone(buzzer,500);
            delay(100);
            noTone(buzzer);           
            //currentLED3+=1;
          }
          else
          {
            tone(buzzer,100);
            delay(1500);
            noTone(buzzer);  
            for(int i = 0; i<5; i++)
            {
              //if(currentLED3!=4)
              bitWrite(currentState2,currentLED3,0);
              if(currentLED3!=4)
                bitWrite(currentState2,currentLED3-1,0);
              shiftRegisterWrite2(currentState2);
              delay(100);
              bitWrite(currentState2, currentLED3, 1);
              if(currentLED3!=4)
                bitWrite(currentState2,currentLED3-1,1);
              shiftRegisterWrite2(currentState2);
              delay(100);
            }
            bitWrite(currentState2, currentLED3,0);
            if(currentLED3!=4)
              bitWrite(currentState2,currentLED3-1,0);
            shiftRegisterWrite2(currentState2); 
            startGame=false;
          }
        }
      }
      else if(lvl3 && !lvl4)
      {
        isPressed4 = true;
        stopLED = currentLED4;
        if(oneled)
        {
          if(currentLED4 == currentLED3 - 4)
          {
            shiftRegisterWrite2(currentState2);
            lvl4 = true;
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);    
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);          
          }
          else
          {
            tone(buzzer,100);
            delay(1500);
            noTone(buzzer);  
            for(int i = 0; i<5; i++)
            {
              bitWrite(currentState2,currentLED4,0);
              
              shiftRegisterWrite2(currentState2);
              delay(100);
              bitWrite(currentState2, currentLED4, 1);
              shiftRegisterWrite2(currentState2);
              delay(100);
            }
            bitWrite(currentState2, currentLED4,0);
            shiftRegisterWrite2(currentState2); 
            startGame=false;
          }
        }
        else
        {
          if(currentLED3==5 && currentLED4==0)
          {
            bitWrite(currentState2, currentLED4, 1);
            shiftRegisterWrite2(currentState2);
            lvl4 = true;
            oneled = true;
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);    
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);           
          }
          else if(currentLED4 == currentLED3-4)
          {
            lvl4 = true;
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);    
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);
            tone(buzzer,600);
            delay(500);
            noTone(buzzer); 
          }
          else if(currentLED4 == currentLED3-3)
          {
            bitWrite(currentState2, currentLED4, 0);
            shiftRegisterWrite2(currentState2);
            lvl4 = true;
            oneled = true;
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);    
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);            
          }
          else if(currentLED4 == currentLED3-5)
          {
            bitWrite(currentState2, currentLED4-1, 0);
            shiftRegisterWrite2(currentState2);
            lvl4 = true;
            oneled = true;
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);    
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);
            tone(buzzer,600);
            delay(500);
            noTone(buzzer);            
          }
          else
          {
            tone(buzzer,100);
            delay(1500);
            noTone(buzzer);  
            for(int i = 0; i<5; i++)
            {
              bitWrite(currentState2,currentLED4,0);
              bitWrite(currentState2,currentLED4-1,0);
              shiftRegisterWrite2(currentState2);
              delay(100);
              bitWrite(currentState2, currentLED4, 1);
              bitWrite(currentState2, currentLED4-1, 1);
              shiftRegisterWrite2(currentState2);
              delay(100);
            }
            bitWrite(currentState2, currentLED4,0);
            bitWrite(currentState2, currentLED4-1, 0);
            shiftRegisterWrite2(currentState2);        
          }
        }
        startGame=false;
      }
      //Serial.println("stopLED = " +  stopLED);
      //if(lvl1)
      //stopLED = currentLED2;
    }
    Serial.println(lvl1);
    //incrementer = 1;
    if (!isPressed)
    {
      //currentState2=0b00000000;
      //shiftRegisterWrite2(currentState2);
      if (!lvl1)
      {
        if (currentLED == 8 && round1)
        {
          currentLED = 8;
          round1 = false;
        }
  
        if (currentLED == 4)
          incrementer = 1;
        else if (currentLED <= 8 && !round1)
          incrementer = -1;
  
        currentLED = incrementer + currentLED;
        //currentState = 0b00000000;
  
          if(currentLED == 7 && !round1)
          {
            bitWrite(currentState, 7, 1);
            bitWrite(currentState, 6, 1);
          }
          else if(currentLED == 4)
          {
            bitWrite(currentState, 5, 0);
            bitWrite(currentState, 4, 1);
            round1 = true;
          }
          else if(currentLED == 8  && round1)
          {
            bitWrite(currentState, 6, 0);
            bitWrite(currentState, 7, 1);
            round1 = false;
          }
          else if(round1)
          {
            bitWrite(currentState, currentLED - 2, 0);
            bitWrite(currentState, currentLED - 1, 1);
            bitWrite(currentState, currentLED, 1);
          }
          else
          {
            bitWrite(currentState, currentLED + 1, 0);
            bitWrite(currentState, currentLED, 1);
            bitWrite(currentState, currentLED - 1, 1);
          }
  
  
        //Serial.println(currentLED);
        if (!isPressed)
          shiftRegisterWrite(currentState);
        else
        {
          //shiftRegisterWrite(stopLED);
          delay(10000);
          //lvl1 = true;
          isPressed = false;
        }
      }
    }
    Serial.println(prevButtonState1);
    Serial.println(currentLED);
    //Serial.println(detectButtonRelease(buttonPin, prevButtonState1));
    /*if(detectButtonRelease(buttonPin, prevButtonState1) && lvl1)
    {
      //Serial.println("hello");
      isPressed2 = true;
      stopLED = currentLED2;
    }*/
    Serial.println(isPressed2);
    if (!isPressed2 && lvl1)
    {
      Serial.println("a");
      if (!lvl2)
      {
        Serial.println("b");
        /*if (currentLED2 == 4 && round1lvl2)
        {
          currentLED2 = 4;
          round1lvl2 = false;
        }*/
  
        if (currentLED2 == 0)
          incrementer = 1;
        else if (currentLED2 <= 4 && !round1lvl2)
          incrementer = -1;
  
        currentLED2 = incrementer + currentLED2;
        //currentState = 0b00000000;
        if(oneled)
        {
          if(round1lvl2)
          {
            bitWrite(currentState, currentLED2-1, 0);
            bitWrite(currentState, currentLED2, 1);
            if(currentLED2 == 3)
              round1lvl2 = false;
          }
          else
          {
            bitWrite(currentState, currentLED2+1, 0);                    
            bitWrite(currentState, currentLED2, 1);
            if(currentLED2 == 0)
              round1lvl2 = true;
          }
        }
        else
        {
          if(currentLED2 == 3 && !round1lvl2)
          {
            bitWrite(currentState, 3, 1);
            bitWrite(currentState, 2, 1);
          }
          else if(currentLED2 == 0)
          {
            bitWrite(currentState, 1, 0);
            bitWrite(currentState, 0, 1);
            round1lvl2 = true;
          }
          else if(currentLED2 == 4 && round1lvl2)
          {
            bitWrite(currentState, 2, 0);
            bitWrite(currentState, 3, 1);
            round1lvl2 = false;
          }
          else if(round1lvl2)
          {
            bitWrite(currentState, currentLED2 - 2, 0);
            bitWrite(currentState, currentLED2 - 1, 1);
            bitWrite(currentState, currentLED2, 1);
          }
          else
          {
            bitWrite(currentState, currentLED2 + 1, 0);
            bitWrite(currentState, currentLED2, 1);
            bitWrite(currentState, currentLED2 - 1, 1);
          }
        }
        Serial.println(currentLED2);
        if (!isPressed2)
        {
          Serial.println("d");
          shiftRegisterWrite(currentState);
          //delay(250);
        }
      }
    }
    if(!isPressed3 && lvl2)
    {
      if(!lvl3)
      {
        if (currentLED3 == 8 && round1lvl3)
        {
          currentLED3 = 8;
          round1lvl3 = false;
        }
  
        if (currentLED3 == 4)
          incrementer = 1;
        else if (currentLED3 <= 8 && !round1lvl3)
          incrementer = -1;
  
        currentLED3 = incrementer + currentLED3;
        //currentState2 = 0b00000000;
  
        if(oneled)
        {
          if(round1lvl3)
          {
            bitWrite(currentState2, currentLED3-1, 0);
            bitWrite(currentState2, currentLED3, 1);
            if(currentLED3 == 7)
              round1lvl3 = false;
          }
          else
          {
            bitWrite(currentState2, currentLED3+1, 0);                    
            bitWrite(currentState2, currentLED3, 1);
            if(currentLED3 == 4)
              round1lvl3 = true;
          }        
        }
        else
        {
          if(currentLED3 == 7 && !round1lvl3)
          {
            bitWrite(currentState2, 7, 1);
            bitWrite(currentState2, 6, 1);
          }
          else if(currentLED3 == 4)
          {
            bitWrite(currentState2, 5, 0);
            bitWrite(currentState2, 4, 1);
            round1lvl3 = true;
          }
          else if(currentLED3 == 8  && round1lvl3)
          {
            bitWrite(currentState2, 6, 0);
            bitWrite(currentState2, 7, 1);
            round1lvl3 = false;
          }
          else if(round1lvl3)
          {
            bitWrite(currentState2, currentLED3 - 2, 0);
            bitWrite(currentState2, currentLED3 - 1, 1);
            bitWrite(currentState2, currentLED3, 1);
          }
          else
          {
            bitWrite(currentState2, currentLED3 + 1, 0);
            bitWrite(currentState2, currentLED3, 1);
            bitWrite(currentState2, currentLED3 - 1, 1);
          }
        }
  
        Serial.println(currentLED3);
        if (!isPressed3)
          shiftRegisterWrite2(currentState2);
      }
    }
    if(!isPressed4 && lvl3)
    {
      if (!lvl4)
      {
        Serial.println("b");
        /*if (currentLED2 == 4 && round1lvl2)
        {
          currentLED2 = 4;
          round1lvl2 = false;
        }*/
  
        if (currentLED4 == 0)
          incrementer = 1;
        else if (currentLED4 <= 4 && !round1lvl4)
          incrementer = -1;
  
        currentLED4 = incrementer + currentLED4;
        //currentState = 0b00000000;
        
        if(oneled)
        {
          if(round1lvl4)
          {
            bitWrite(currentState2, currentLED4-1, 0);
            bitWrite(currentState2, currentLED4, 1);
            if(currentLED4 == 3)
              round1lvl4 = false;
          }
          else
          {
            bitWrite(currentState2, currentLED4+1, 0);                    
            bitWrite(currentState2, currentLED4, 1);
            if(currentLED4 == 0)
              round1lvl4 = true;
          }        
        }
        else
        {
          if(currentLED4 == 3 && !round1lvl4)
          {
            bitWrite(currentState2, 3, 1);
            bitWrite(currentState2, 2, 1);
          }
          else if(currentLED4 == 0)
          {
            bitWrite(currentState2, 1, 0);
            bitWrite(currentState2, 0, 1);
            round1lvl4 = true;
          }
          else if(currentLED4 == 4 && round1lvl4)
          {
            bitWrite(currentState2, 2, 0);
            bitWrite(currentState2, 3, 1);
            round1lvl4 = false;
          }
          else if(round1lvl4)
          {
            bitWrite(currentState2, currentLED4 - 2, 0);
            bitWrite(currentState2, currentLED4 - 1, 1);
            bitWrite(currentState2, currentLED4, 1);
          }
          else
          {
            bitWrite(currentState2, currentLED4 + 1, 0);
            bitWrite(currentState2, currentLED4, 1);
            bitWrite(currentState2, currentLED4 - 1, 1);
          }
        }
        Serial.println(currentLED4);
        if (!isPressed4)
        {
          Serial.println("d");
          shiftRegisterWrite2(currentState2);
          //delay(250);
        }
        else
        {
          Serial.println("e");
          shiftRegisterWrite2(stopLED);
          //lvl4 = true;
        }
      }    
    }
    if(lvl3)
      delay(75);
    else if(lvl2)
      delay(100);
    else if(lvl1)
      delay(150);
    else
      delay(200);
    Serial.println("----");
  }
}
bool detectButtonRelease(int buttonPin, int& prevButtonState)
{
  int currentButtonState = digitalRead(buttonPin);
  bool isReleased = false;

  if (prevButtonState == HIGH && currentButtonState == LOW)
    isReleased = true;

  prevButtonState = currentButtonState;
  return isReleased;
}
